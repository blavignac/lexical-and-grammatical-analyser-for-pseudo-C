%{
    #include <stdio.h>
    #include <stdlib.h>
    int yylex (void);
    void yyerror (const char *);
%}

%code provides {
  int yylex (void);
  void yyerror (const char *);
}

%union { char* name; int val;}

%token tMUL tVOID tEQ tAMPER tMAIN tSEMI tLPAR tRPAR tRBRACE tLBRACE tADD tCOMMA tINT tSUB tELSE tDIV tIF tAND tNE tGT tGE tLT tLE tOR tWHILE tRETURN tASSIGN tNOT tERROR tPRINT
%token <name> tID
%token <val> tNB

%%

program:
      %empty
    | statement_list
    | statement_list main
    ;


type:
      tINT {printf("INT\n");}
    | tVOID {printf("VOID\n");}
    ;

statement_list:
      %empty
    | statement statement_list
    ;

statement:
      var_dec
    | func_dec
    ;

var_dec:
      type tMUL tID tSEMI {printf("var dec: *%s;\n",$3);}
    | type tMUL tID tASSIGN tID tSEMI {printf("var dec: *%s=%s;\n",$3,$5);}
    | tINT tID tSEMI {printf("var dec: %s;\n",$2);}
    | tINT tID tASSIGN tNB tSEMI {printf("var dec: %s=%d;\n",$2,$4);}
    ;


main:
      type tMAIN tLPAR tVOID tRPAR block {printf("main fonction");}

func_dec:
      type tID tLPAR func_param tRPAR block {printf("fonction : %s\n",$2);}
    ;


func_param:
      %empty
    | tVOID {printf("param : void\n");}
    | param 
    ;

param:
      type tID tCOMMA param {printf("param : %s\n",$2);}
    | type tID {printf("param : %s\n",$2);}
    ;

block:
      %empty
    | tLBRACE expression_list tRBRACE 
    ;

expression_list:
      %empty
    | expression expression_list
    ;

expression:
      %empty
    | t_expression
    | if    
    | if_else
    ;

t_expression:
    | var_dec 
    | arithmetic
    | bool
    ;

arithmetic_operator:
      tADD {printf("+\n");}
    | tMUL {printf("*\n");}
    | tSUB {printf("-\n");}
    | tDIV {printf("DIV\n");}
    ;

arithmetic:
      value arithmetic_operator value {}
    | arithmetic arithmetic_operator arithmetic {}
    | arithmetic arithmetic_operator value {}
    | value arithmetic_operator arithmetic {}
;

bool_operator:
      tEQ {printf("==\n");}
    | tNE {printf("!=\n");}
    | tGT {printf(">\n");}
    | tGE {printf(">=\n");}
    | tLT {printf("<\n");}
    | tLE {printf("<=\n");}
    | tAND {printf("AND\n");}
    | tOR {printf("OR\n");}
    | tNOT {printf("NOT\n");}
    ;

bool:
      value bool_operator value
    | bool bool_operator bool
    | value bool_operator bool
    | bool bool_operator value
    | tNOT bool {printf("NOT\n");}
    | tNOT value {printf("NOT\n");}
    ;

value:
      tID {printf("%s\n",$1);}
    | tNB {printf("%d\n",$1);}
;

condition:
      %empty
    |  bool
    |  arithmetic
    |  value
    ;

if_else:
      tIF tLPAR condition tRPAR block tELSE block {printf("IF ELSE\n");}
    | tIF tLPAR condition tRPAR t_expression tELSE block {printf("IF ELSE\n");}
    ;

if:
      tIF tLPAR condition tRPAR block {printf("IF\n");}
    | tIF tLPAR condition tRPAR t_expression tELSE block {printf("IF\n");}
    ;

while:
      tWHILE tLPAR condition tRPAR block {printf("WHILE\n");}
    ;



%%

void yyerror(const char *msg) {
  fprintf(stderr, "error: %s\n", msg);
  exit(1);
}


int main(void) {
  yyparse();
}


